using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using WindowsAnimation;
using MonogameAutoGeneratedContent;
using System.Linq;

namespace TriggeredAnimation
{
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        AudioService AudioService;
        Animator Animator;

        protected override void Initialize()
        {
            base.Initialize();
            AudioService = new AudioService();
        }
        SimpleAnimation Cartolina_Corpo;
        SimpleAnimation Cartolina_pupila;
        SimpleAnimation Cartolina_Boca;
        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);

            Cartolina_pupila = SpriteSheet_Carolina.Load_Pupila(Content);
            Cartolina_Boca = SpriteSheet_Carolina.Load_Boca(Content).AsScaleAnimation();
            Cartolina_Corpo = SpriteSheet_Carolina.Load_Corpo(Content);
            var PalpebrasFechando = SpriteSheet_Carolina.Load_Palpebras_fechando(Content);
            var PalpebrasAbertas = SpriteSheet_Carolina.Load_Palpebras_abertas(Content);
            var PalpebrasAbrindo = PalpebrasFechando.Reverse();
            Animator = new Animator(
                new TriggeredAnimationTransitionRule(
                    PalpebrasAbertas, 
                    PalpebrasFechando, 
                    "piscar")
                , new AnimationTransitionRule(
                    PalpebrasFechando,
                    PalpebrasAbrindo)
                , new AnimationTransitionRule(
                    PalpebrasAbrindo, 
                    PalpebrasAbertas)
            );

        }

        protected override void UnloadContent()
        {
        }

        protected override void Update(GameTime gameTime)
        {
            GamePadState gamePadState = GamePad.GetState(PlayerIndex.One);


            easyX.Enqueue(gamePadState.ThumbSticks.Left.X * 5);
            easyY.Enqueue(gamePadState.ThumbSticks.Left.Y * 2);
            base.Update(gameTime);
        }
        FixedSizedQueue<float> easyX = new FixedSizedQueue<float>(20);
        FixedSizedQueue<float> easyY = new FixedSizedQueue<float>(15);
        DateTime horaDePiscar;
        protected override void Draw(GameTime gameTime)
        {
            if(horaDePiscar < DateTime.Now)
            {
                horaDePiscar = DateTime.Now.AddSeconds(8);
                Animator.ActivateTrigger("piscar");
            }
            var x = easyX.Sum()/easyX.Limit;
            var y = easyY.Sum() / easyY.Limit;
          
            GraphicsDevice.Clear(Color.Blue);
            spriteBatch.Begin();

            Cartolina_Corpo.Draw(spriteBatch, 50, 50, Color.White);

            Cartolina_pupila.Draw(spriteBatch,
                75 + (int)(x),
                80 - (int)(y),
                Color.White);

            Cartolina_Boca.Draw(
                spriteBatch
                , 75
                , 105
                , Color.White);

            Animator.Draw(spriteBatch, 65, 68, Color.White);
            spriteBatch.End();
            base.Draw(gameTime);
        }
    }
}
